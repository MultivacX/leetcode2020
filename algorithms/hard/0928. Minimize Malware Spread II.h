// 928. Minimize Malware Spread II
// https://leetcode.com/problems/minimize-malware-spread-ii/

// Runtime: 264 ms, faster than 5.52% of C++ online submissions for Minimize Malware Spread II.
// Memory Usage: 44.7 MB, less than 30.67% of C++ online submissions for Minimize Malware Spread II.
    
class Solution {
    int bfs(const vector<vector<int>>& graph, 
            const unordered_set<int>& infected, 
            int k) {
        const int n = graph.size();
        unordered_set<int> visited{k};
        queue<int> q; 
        for (int i : infected) {
            visited.insert(i);
            q.push(i);
        }
        
        while (!q.empty()) {
            int size = q.size();
            while (size-- > 0) {
                int i = q.front(); q.pop();
                for (int j = 0; j < n; ++j) {
                    if (graph[i][j] == 0) continue;
                    if (!visited.insert(j).second) continue;
                    q.push(j);
                }
            }
        }
        
        return visited.size();
    }
    
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        const int n = graph.size();
        
        unordered_set<int> infected(begin(initial), end(initial));
        
        int ans = n;
        int maxInfected = n;
        
        for (int k : initial) {
            infected.erase(k);
            int cnt = bfs(graph, infected, k);
            infected.insert(k);

            if (maxInfected >= cnt) {
                if (maxInfected > cnt || ans > k) 
                    ans = k;
                maxInfected = cnt;
            }
        }
        
        return ans;
    }
};