// 924. Minimize Malware Spread
// https://leetcode.com/problems/minimize-malware-spread/

// Runtime: 448 ms, faster than 6.97% of C++ online submissions for Minimize Malware Spread.
// Memory Usage: 69.4 MB, less than 17.96% of C++ online submissions for Minimize Malware Spread.
    
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        const int n = graph.size();
        
        unordered_set<int> badNodes(begin(initial), end(initial));
        // optim:
        // unordered_map<int, int> badNodes;
        // for (int k : initial) badNodes[k] = 0;
        
        int index = n;
        int count = 0;
        
        for (int k : initial) {
            // optim: if (badNodes[k] > 0) continue;
            
            unordered_set<int> visited{k};
            unordered_set<int> bad{k};
            queue<int> q; q.push(k);
            
            while (!q.empty()) {
                int size = q.size();
                while (size-- > 0) {
                    int i = q.front(); q.pop();
                    for (int j = 0; j < n; ++j) {
                        if (graph[i][j] == 0) 
                            continue;
                        if (!visited.insert(j).second)
                            continue;
                        if (badNodes.count(j))
                            bad.insert(j);
                        q.push(j);
                    }
                }
            }
            
            // optim: badNodes[k] = bad.size();
            
            if (bad.size() == 1 && count <= visited.size()) {
                index = count == visited.size() ? min(index, k) : k;
                count = visited.size();
            }
        }
        
        if (index == n) return *min_element(begin(initial), end(initial));
        return index;
    }
};